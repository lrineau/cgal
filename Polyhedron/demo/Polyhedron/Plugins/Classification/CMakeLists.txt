include( polyhedron_demo_macros )

if(EIGEN3_FOUND)

  qt5_wrap_ui( classificationUI_FILES Classification_widget.ui)
  polyhedron_demo_plugin(classification_plugin Classification_plugin Point_set_item_classification ${classificationUI_FILES})
  
  set(classification_linked_libraries)
  set(classification_compile_definitions)
  
  find_package(Boost COMPONENTS serialization iostreams)
  if (Boost_SERIALIZATION_FOUND AND Boost_IOSTREAMS_FOUND)
    set(classification_linked_libraries ${classification_linked_libraries}
      ${Boost_SERIALIZATION_LIBRARY}
      ${Boost_IOSTREAMS_LIBRARY})
    set(classification_compile_definitions ${classification_compile_definitions}
      "-DCGAL_LINKED_WITH_BOOST_SERIALIZATION")
  else()
    message(STATUS "NOTICE: Boost Serialization or IO Streams not found. IO functions for ETHZ classifier won't be available.")
  endif()

  find_package(OpenCV QUIET)
  if (OpenCV_FOUND)
    message(STATUS "Found OpenCV ${OpenCV_VERSION}")
    include_directories(${OpenCV_INCLUDE_DIRS})
    set(classification_linked_libraries ${classification_linked_libraries}
      ${OpenCV_LIBS})
    set(classification_compile_definitions ${classification_compile_definitions}
      "-DCGAL_LINKED_WITH_OPENCV")
  else()
    message(STATUS "NOTICE: OpenCV was not found. OpenCV random forest predicate for classification won't be available.")
  endif()
  
  target_link_libraries(classification_plugin PUBLIC scene_points_with_normal_item
    scene_polylines_item scene_polygon_soup_item scene_color_ramp ${classification_linked_libraries})
  target_compile_definitions(classification_plugin PUBLIC ${classification_compile_definitions})

else(EIGEN3_FOUND)
  message(STATUS "NOTICE: Eigen 3.1 (or greater) was not found. Classification plugin will not be available.")
endif()


